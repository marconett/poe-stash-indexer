name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - master

env:
  # Because matklad said so https://matklad.github.io/2021/09/04/fast-rust-builds.html
  CARGO_INCREMENTAL: 0

permissions:
  actions: write # allow dependabot PRs to manipulate CI cache

jobs:
  ci:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - name: Dependencies
        run: sudo apt-get install -y age protobuf-compiler

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up Rust cache
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: poe-stash-indexer-ci

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Compile
        run: cargo build

      - name: Test
        env:
          POE_CLIENT_ID: ${{ secrets.POE_CLIENT_ID }}
          POE_CLIENT_SECRET: ${{ secrets.POE_CLIENT_SECRET }}
          DEVELOPER_EMAIL: mxmlnstock@gmail.com
        run: cargo test --all-features -- --nocapture --quiet

      - name: Format
        run: cargo fmt --all -- --check

      - name: Lint
        run: cargo clippy --all-features --all-targets -- -D warnings --no-deps

      # Workaround for overriding existing cache
      - name: Clear Rust CI step cache
        if: ${{ steps.restore-cache.outputs.cache-hit }}
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete poe-stash-indexer-ci --confirm
        continue-on-error: true

      - name: Save Rust CI step cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  docker:
    runs-on: ubuntu-latest
    needs: ci
    if: "!contains(github.event.head_commit.message, 'docker skip') && github.ref_name == 'master'"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up Rust cache
        id: restore-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: poe-stash-indexer-docker
      - name: Build
        run: |
          docker pull maximumstock2/base:latest
          docker run -v $PWD:/volume -v ~/.cargo:/volume/.cargo -e CARGO_HOME="/volume/.cargo" --rm -t maximumstock2/base:latest bash -c "\
            cd /volume \
            && cargo build --release --all-features --bin indexer --bin trade-api --bin trade-ingest \
            && strip target/x86_64-unknown-linux-musl/release/indexer \
            && strip target/x86_64-unknown-linux-musl/release/trade-ingest \
            && strip target/x86_64-unknown-linux-musl/release/trade-api \
            "
      # Workaround for overriding existing cache
      - name: Clear Rust Docker CI step cache
        if: ${{ steps.restore-cache.outputs.cache-hit }}
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ steps.restore-cache.outputs.cache-primary-key }} --confirm
        continue-on-error: true
      - name: Save Rust Docker CI step cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set short git commit SHA
        id: vars
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$shortSha"
      - name: Build indexer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./crates/indexer/Dockerfile
          target: production
          push: true
          tags: |
            maximumstock2/indexer:latest
            maximumstock2/indexer:${{ steps.vars.outputs.short_sha }}
      - name: Build trade-ingest
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./crates/trade-ingest/Dockerfile
          target: production
          push: true
          tags: |
            maximumstock2/trade-ingest:latest
            maximumstock2/trade-ingest:${{ steps.vars.outputs.short_sha }}
      - name: Build trade-api
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./crates/trade-api/Dockerfile
          target: production
          push: true
          tags: |
            maximumstock2/trade-api:latest
            maximumstock2/trade-api:${{ steps.vars.outputs.short_sha }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - ci
      - docker
    if: "!contains(github.event.head_commit.message, 'deploy skip') && github.ref_name == 'master'"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deployment
        env:
          DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          AGE_KEY: ${{ secrets.AGE_KEY }}
        run: |
          eval $(ssh-agent -s)
          ssh-add <(echo "$DEPLOY_PRIVATE_KEY")
          ssh -q -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
            export AGE_KEY="$AGE_KEY"
            export ENV="production"

            set -ex
            echo "Environment: $ENV"

            # Make sure we have the latest images
            docker pull maximumstock2/trade-api:latest
            docker pull maximumstock2/trade-ingest:latest
            docker pull maximumstock2/indexer:latest

            cd deployment && git pull
            make config
            docker-compose -f docker-compose.yaml -f docker-compose.production.yaml build --force-rm reverse-proxy rabbitmq
            make up-prod
            docker-compose -f docker-compose.yaml -f docker-compose.production.yaml logs --tail=1000 trade-api trade-store indexer
          EOF
